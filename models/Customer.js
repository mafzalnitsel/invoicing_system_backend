import { Schema, model } from "mongoose";

// BPAddresses Subschema
const BPAddressSchema = new Schema(
  {
    AddressName: String,
    Street: String,
    Block: String,
    ZipCode: String,
    City: String,
    County: String,
    Country: String,
    State: String,
    FederalTaxID: String,
    TaxCode: String,
    BuildingFloorRoom: String,
    AddressType: String,
    AddressName2: String,
    AddressName3: String,
    TypeOfAddress: String,
    StreetNo: String,
    BPCode: String,
    RowNum: Number,
    GlobalLocationNumber: String,
    Nationality: String,
    TaxOffice: String,
    GSTIN: String,
    GstType: String,
    CreateDate: Date,
    CreateTime: String,
    MYFType: String,
    TaasEnabled: String,
  },
  { _id: false }
);

// ContactEmployees Subschema
const ContactEmployeeSchema = new Schema(
  {
    CardCode: String,
    Name: String,
    Position: String,
    Address: String,
    Phone1: String,
    Phone2: String,
    MobilePhone: String,
    Fax: String,
    E_Mail: String,
    Pager: String,
    Remarks1: String,
    Remarks2: String,
    Password: String,
    InternalCode: Number,
    PlaceOfBirth: String,
    DateOfBirth: Date,
    Gender: String,
    Profession: String,
    Title: String,
    CityOfBirth: String,
    Active: String,
    FirstName: String,
    MiddleName: String,
    LastName: String,
    EmailGroupCode: String,
    BlockSendingMarketingContent: String,
    CreateDate: Date,
    CreateTime: String,
    UpdateDate: Date,
    UpdateTime: String,
    ConnectedAddressName: String,
    ConnectedAddressType: String,
    ForeignCountry: String,
    U_SendWA: String,
    U_SendSMS: String,
    U_SendEmail: String,
    ContactEmployeeBlockSendingMarketingContents: [Schema.Types.Mixed],
  },
  { _id: false }
);

// BPAccountReceivablePaybleCollection Subschema
const BPAccountSchema = new Schema(
  {
    AccountType: String,
    AccountCode: String,
    BPCode: String,
  },
  { _id: false }
);

// BPBranchAssignment Subschema
const BPBranchAssignmentSchema = new Schema(
  {
    BPCode: String,
    BPLID: Number,
    DisabledForBP: String,
  },
  { _id: false }
);

// BPBankAccounts Subschema
const BPBankAccountSchema = new Schema(
  {
    LogInstance: Number,
    UserNo4: String,
    BPCode: String,
    County: String,
    State: String,
    UserNo2: String,
    IBAN: String,
    ZipCode: String,
    City: String,
    Block: String,
    Branch: String,
    Country: String,
    Street: String,
    ControlKey: String,
    UserNo3: String,
    BankCode: String,
    AccountNo: String,
    UserNo1: String,
    InternalKey: Number,
    BuildingFloorRoom: String,
    BIK: String,
    AccountName: String,
    CorrespondentAccount: String,
    Phone: String,
    Fax: String,
    CustomerIdNumber: String,
    ISRBillerID: String,
    ISRType: Number,
    BICSwiftCode: String,
    ABARoutingNumber: String,
    MandateID: String,
    SignatureDate: Date,
    MandateExpDate: Date,
    SEPASeqType: String,
  },
  { _id: false }
);

// Main Customer Schema
const CustomerSchema = new Schema(
  {
    "@odata.etag": String,
    CardCode: String,
    CardName: String,
    CardType: String,
    GroupCode: Number,
    Address: String,
    ZipCode: String,
    MailAddress: String,
    MailZipCode: String,
    Phone1: String,
    Phone2: String,
    Fax: String,
    ContactPerson: String,
    Notes: String,
    PayTermsGrpCode: Number,
    CreditLimit: Number,
    MaxCommitment: Number,
    DiscountPercent: Number,
    VatLiable: String,
    FederalTaxID: String,
    DeductibleAtSource: String,
    DeductionPercent: Number,
    DeductionValidUntil: Date,
    PriceListNum: Number,
    IntrestRatePercent: Number,
    CommissionPercent: Number,
    CommissionGroupCode: Number,
    FreeText: String,
    SalesPersonCode: Number,
    Currency: String,
    RateDiffAccount: String,
    Cellular: String,
    AvarageLate: Number,
    City: String,
    County: String,
    Country: String,
    MailCity: String,
    MailCounty: String,
    MailCountry: String,
    EmailAddress: String,
    Picture: String,
    DefaultAccount: String,
    DefaultBranch: String,
    DefaultBankCode: String,
    AdditionalID: String,
    Pager: String,
    FatherCard: String,
    CardForeignName: String,
    FatherType: String,
    DeductionOffice: String,
    ExportCode: String,
    MinIntrest: Number,
    CurrentAccountBalance: Number,
    OpenDeliveryNotesBalance: Number,
    OpenOrdersBalance: Number,
    OpenChecksBalance: Number,
    VatGroup: String,
    ShippingType: String,
    Password: String,
    Indicator: String,
    IBAN: String,
    CreditCardCode: Number,
    CreditCardNum: String,
    CreditCardExpiration: Date,
    DebitorAccount: String,
    OpenOpportunities: Number,
    Valid: String,
    ValidFrom: Date,
    ValidTo: Date,
    ValidRemarks: String,
    Frozen: String,
    FrozenFrom: Date,
    FrozenTo: Date,
    FrozenRemarks: String,
    Block: String,
    BillToState: String,
    ShipToState: String,
    ExemptNum: String,
    Priority: Number,
    FormCode1099: String,
    Box1099: String,
    PeymentMethodCode: String,
    BackOrder: String,
    PartialDelivery: String,
    BlockDunning: String,
    BankCountry: String,
    HouseBank: String,
    HouseBankCountry: String,
    HouseBankAccount: String,
    ShipToDefault: String,
    DunningLevel: String,
    DunningDate: Date,
    CollectionAuthorization: String,
    DME: String,
    InstructionKey: String,
    SinglePayment: String,
    ISRBillerID: String,
    PaymentBlock: String,
    ReferenceDetails: String,
    HouseBankBranch: String,
    OwnerIDNumber: String,
    PaymentBlockDescription: Number,
    TaxExemptionLetterNum: String,
    MaxAmountOfExemption: Number,
    ExemptionValidityDateFrom: Date,
    ExemptionValidityDateTo: Date,
    LinkedBusinessPartner: String,
    LastMultiReconciliationNum: String,
    DeferredTax: String,
    Equalization: String,
    SubjectToWithholdingTax: String,
    CertificateNumber: String,
    ExpirationDate: Date,
    NationalInsuranceNum: String,
    AccrualCriteria: String,
    WTCode: String,
    BillToBuildingFloorRoom: String,
    DownPaymentClearAct: String,
    ChannelBP: String,
    DefaultTechnician: String,
    BilltoDefault: String,
    CustomerBillofExchangDisc: String,
    Territory: String,
    ShipToBuildingFloorRoom: String,
    CustomerBillofExchangPres: String,
    ProjectCode: String,
    VatGroupLatinAmerica: String,
    DunningTerm: String,
    Website: String,
    OtherReceivablePayable: String,
    BillofExchangeonCollection: String,
    CompanyPrivate: String,
    LanguageCode: Number,
    UnpaidBillofExchange: String,
    WithholdingTaxDeductionGroup: Number,
    ClosingDateProcedureNumber: String,
    Profession: String,
    BankChargesAllocationCode: String,
    TaxRoundingRule: String,
    Properties1: String,
    // Properties2 ... Properties64 â†’ These could be dynamically stored using a Mixed type or individually defined
    CreateDate: Date,
    CreateTime: String,

    // Arrays / Nested Documents
    BPAddresses: [BPAddressSchema],
    ContactEmployees: [ContactEmployeeSchema],
    BPAccountReceivablePaybleCollection: [BPAccountSchema],
    BPBranchAssignment: [BPBranchAssignmentSchema],
    BPBankAccounts: [BPBankAccountSchema],

    ElectronicProtocols: [Schema.Types.Mixed],
    BPPaymentMethods: [Schema.Types.Mixed],
    BPWithholdingTaxCollection: [Schema.Types.Mixed],
    BPPaymentDates: [Schema.Types.Mixed],
    BPFiscalTaxIDCollection: [Schema.Types.Mixed],
    DiscountGroups: [Schema.Types.Mixed],
    BPIntrastatExtension: Schema.Types.Mixed,
    BPBlockSendingMarketingContents: [Schema.Types.Mixed],
    BPCurrenciesCollection: [Schema.Types.Mixed],
  },
  { timestamps: true }
);

export default model("Customer", CustomerSchema);
